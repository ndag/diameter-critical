import numpy as np
import networkx as nx
from asp import get_distance_matrix, evaluation, get_diam_indices



# set the data to be the configuration obtained from T_5 removing P_1
# data = [np.array([0.1043772485727064, -6.219163658130961e-05, -0.036990598090919855, 0.9938496273408105]), np.array([-0.4700736247234575, 0.8139520183197264, -0.33224698336966585, 0.07826136501717165]), np.array([-0.4700738077724748, -0.8139532958391443, -0.3322471984244794, 0.07824606429696979]), np.array([-0.00013774372708242352, -4.210407202265588e-07, 0.9969296766073409, 0.0783019854542087]), np.array([0.94280392617836, -5.644069974974151e-13, -0.33333141618208945, 0.0033051125113148306]), np.array([-0.4714037535053653, 0.8164952529168821, -0.33333278967825836, 0.0018040151217728155]), np.array([-0.47140375529563067, -0.8164952559948819, -0.33333279095523194, 0.0018019170416869307]), np.array([2.0658747978851887e-10, -2.4049148919972533e-14, 0.9999983793288768, 0.0018003720781986023]), np.array([0.942809013895621, -3.661502528981075e-10, -0.3333333228580278, -0.00024328911241710443]), np.array([-0.4714044478828691, 0.8164964547970915, -0.3333332819172411, -0.0005558653698189792]), np.array([-0.4714044478828171, -0.8164964547971366, -0.33333328191720435, -0.0005558653698189792]), np.array([-1.106606831907155e-13, 0.0, 0.9999998454644214, -0.0005559416636164467]), np.array([0.942744712986818, 7.268912600338509e-08, -0.33331091797226997, -0.011672107602292831]), np.array([-0.4713450402452529, 0.8164182045119677, -0.33330637814418196, -0.014213608481435918]), np.array([-0.4713449971454667, -0.8164180888440808, -0.3333063494360755, -0.014222352116138905]), np.array([1.411293284328889e-05, 1.6344080325822022e-08, 0.9998991901922306, -0.01419891734415976]), np.array([0.8486288970988483, 4.255493887678088e-06, -0.3000202879474392, -0.435679723892011]), np.array([-0.46245730572502963, 0.7748613114361447, -0.3109881920231823, -0.29834465445715097]), np.array([-0.4624467365442858, -0.774835268936937, -0.3109793726979206, -0.2984378522027195]), np.array([-0.015090377239742228, 2.793790237348218e-06, 0.9543585614989208, -0.2982817738325082])]


data = [np.array([0.10432558648942221, 7.845829902192118e-05, -0.03678782871972518, 0.9938625767710653]), np.array([-0.4700691152922165, 0.8139580878589273, -0.33224098489263193, 0.07825078922928294]), np.array([-0.4700683631376401, -0.813948247731516, -0.33224050544946976, 0.0783596230885225]), np.array([-0.00013193321381969777, 4.057594016767735e-06, 0.9969395614412861, 0.07817604115340634]), np.array([0.9428037546395271, 1.3097993163729805e-07, -0.3333312510818598, 0.0033700578326282403]), np.array([-0.471403769034149, 0.8164949563593131, -0.3333324420579569, 0.001988932346949273]), np.array([-0.4714037890388955, -0.8164947217451481, -0.333332591436325, 0.0020543924721544266]), np.array([-2.1147245241643732e-07, -4.4561966379371255e-08, 0.9999981417512271, 0.0019278210616942891]), np.array([0.942809013895621, -3.661502528981075e-10, -0.3333333228580278, -0.00024328911241710443]), np.array([-0.4714046519994778, 0.8164964404405364, -0.3333330912726243, -0.000516801529837392]), np.array([-0.47140464693222445, -0.8164963995553202, -0.3333332568599665, -0.0004777395017227665]), np.array([-3.9239721757330404e-07, -1.525720861778057e-07, 0.9999998457724374, -0.0005553871839512878]), np.array([0.9427439369282044, -4.5084611601575257e-07, -0.3333111357488074, -0.011728434283680193]), np.array([-0.47134617962059777, 0.8164172595614921, -0.33330654366514084, -0.01422621513853578]), np.array([-0.4713463720663821, -0.8164185601075762, -0.3333068079019744, -0.014138743152355056]), np.array([1.2749216778306788e-05, -6.597867289621903e-07, 0.9998975996497287, -0.014310487473635706]), np.array([0.8486549964400072, -2.8847262103276525e-05, -0.30008751204866146, -0.43558257689867613]), np.array([-0.46245063612685544, 0.774822897957366, -0.31101974004248556, -0.29842186121449044]), np.array([-0.462451996874042, -0.774867920816462, -0.31102294063018227, -0.29829949091230146]), np.array([-0.015094254061854944, -1.9693849786385e-05, 0.9542952807626239, -0.2984839697884181])]

# obtain the distance matrix
distance_matrix =  get_distance_matrix(data)
upper_triangular = np.triu(distance_matrix)
flattened = upper_triangular.flatten()
non_zeros = flattened[flattened != 0]
sorted_array = np.sort(non_zeros)[::-1]
print('sorted_array: ', sorted_array[:60])
count = np.sum(sorted_array > 0)
print('count: ', count)


# evulate if the data is pointwise extremal at the given proximity_threshold, if it is pointwise extremal, the loss is 0.0

proximity_threshold = 1e-6
loss =  evaluation(data, distance_matrix, proximity_threshold)
print('loss: ', loss)

# compute the number of edges in the diameter graph
diam_indices = get_diam_indices(distance_matrix, proximity_threshold)
diam_graph = nx.from_dict_of_lists(diam_indices)
num_edges = nx.number_of_edges(diam_graph)
print('num_edges: ', num_edges)

# compute 3n-5
n = len(data)
print('3n-5: ', 3*n-5)